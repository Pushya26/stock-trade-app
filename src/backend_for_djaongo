# requirements.txt
"""
Django==4.2.7
djangorestframework==3.14.0
django-cors-headers==4.3.1
yfinance==0.2.28
python-decouple==3.8
requests==2.31.0
"""

# settings.py
import os
from pathlib import Path
from decouple import config

BASE_DIR = Path(__file__).resolve().parent.parent

SECRET_KEY = config('SECRET_KEY', default='your-secret-key-here')
DEBUG = config('DEBUG', default=True, cast=bool)

ALLOWED_HOSTS = ['localhost', '127.0.0.1', '0.0.0.0']

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'corsheaders',
    'trading',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
    ],
}

# CORS settings for React frontend
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
]

CORS_ALLOW_CREDENTIALS = True

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

STATIC_URL = 'static/'
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# main urls.py
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('api/', include('trading.urls')),
]

# trading/models.py
from django.db import models
from django.contrib.auth.models import User
from django.utils import timezone

class Portfolio(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    cash = models.DecimalField(max_digits=15, decimal_places=2, default=50000.00)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"{self.user.username}'s Portfolio"

class Stock(models.Model):
    symbol = models.CharField(max_length=10, unique=True)
    name = models.CharField(max_length=200)
    exchange = models.CharField(max_length=50, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"{self.symbol} - {self.name}"

class Holding(models.Model):
    portfolio = models.ForeignKey(Portfolio, on_delete=models.CASCADE, related_name='holdings')
    stock = models.ForeignKey(Stock, on_delete=models.CASCADE)
    quantity = models.PositiveIntegerField(default=0)
    average_price = models.DecimalField(max_digits=10, decimal_places=2, default=0.00)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        unique_together = ['portfolio', 'stock']

    def __str__(self):
        return f"{self.portfolio.user.username} - {self.stock.symbol}: {self.quantity}"

class Transaction(models.Model):
    TRANSACTION_TYPES = [
        ('BUY', 'Buy'),
        ('SELL', 'Sell'),
    ]
    
    portfolio = models.ForeignKey(Portfolio, on_delete=models.CASCADE, related_name='transactions')
    stock = models.ForeignKey(Stock, on_delete=models.CASCADE)
    transaction_type = models.CharField(max_length=4, choices=TRANSACTION_TYPES)
    quantity = models.PositiveIntegerField()
    price = models.DecimalField(max_digits=10, decimal_places=2)
    total_amount = models.DecimalField(max_digits=15, decimal_places=2)
    timestamp = models.DateTimeField(auto_now_add=True)

    class Meta:
        ordering = ['-timestamp']

    def __str__(self):
        return f"{self.transaction_type} {self.quantity} {self.stock.symbol} @ {self.price}"

# trading/serializers.py
from rest_framework import serializers
from .models import Portfolio, Stock, Holding, Transaction

class StockSerializer(serializers.ModelSerializer):
    class Meta:
        model = Stock
        fields = ['id', 'symbol', 'name', 'exchange']

class HoldingSerializer(serializers.ModelSerializer):
    stock = StockSerializer(read_only=True)
    
    class Meta:
        model = Holding
        fields = ['id', 'stock', 'quantity', 'average_price', 'updated_at']

class TransactionSerializer(serializers.ModelSerializer):
    stock = StockSerializer(read_only=True)
    
    class Meta:
        model = Transaction
        fields = ['id', 'stock', 'transaction_type', 'quantity', 'price', 'total_amount', 'timestamp']

class PortfolioSerializer(serializers.ModelSerializer):
    holdings = HoldingSerializer(many=True, read_only=True)
    recent_transactions = serializers.SerializerMethodField()
    
    class Meta:
        model = Portfolio
        fields = ['id', 'cash', 'holdings', 'recent_transactions', 'created_at', 'updated_at']
    
    def get_recent_transactions(self, obj):
        recent = obj.transactions.all()[:10]
        return TransactionSerializer(recent, many=True).data

# trading/stock_service.py
import yfinance as yf
import requests
from typing import Dict, List, Optional
from decimal import Decimal

class StockService:
    @staticmethod
    def get_stock_quote(symbol: str) -> Optional[Dict]:
        """Get real-time stock quote for a single symbol"""
        try:
            ticker = yf.Ticker(symbol)
            info = ticker.info
            hist = ticker.history(period="2d")
            
            if hist.empty:
                return None
                
            current_price = hist['Close'].iloc[-1]
            prev_close = hist['Close'].iloc[-2] if len(hist) > 1 else current_price
            change = current_price - prev_close
            change_percent = (change / prev_close * 100) if prev_close != 0 else 0
            
            return {
                'symbol': symbol.upper(),
                'name': info.get('longName', info.get('shortName', symbol)),
                'price': float(current_price),
                'change': float(change),
                'changePercent': float(change_percent),
                'currency': info.get('currency', 'USD'),
                'exchange': info.get('exchange', ''),
                'regularMarketPrice': float(current_price),
                'regularMarketChange': float(change),
                'regularMarketChangePercent': float(change_percent),
                'previousClose': float(prev_close),
                'volume': int(info.get('volume', 0)),
                'marketCap': info.get('marketCap', 0),
                'longName': info.get('longName', ''),
                'shortName': info.get('shortName', ''),
            }
        except Exception as e:
            print(f"Error fetching quote for {symbol}: {e}")
            return None
    
    @staticmethod
    def get_multiple_quotes(symbols: List[str]) -> List[Dict]:
        """Get quotes for multiple symbols"""
        quotes = []
        for symbol in symbols:
            quote = StockService.get_stock_quote(symbol)
            if quote:
                quotes.append(quote)
        return quotes
    
    @staticmethod
    def search_stocks(query: str) -> List[Dict]:
        """Search for stocks by symbol or name"""
        try:
            # Simple search using yfinance
            ticker = yf.Ticker(query.upper())
            info = ticker.info
            
            if info and info.get('symbol'):
                return [{
                    'symbol': info.get('symbol', query.upper()),
                    'name': info.get('longName', info.get('shortName', '')),
                    'exchange': info.get('exchange', ''),
                }]
            return []
        except Exception as e:
            print(f"Error searching stocks: {e}")
            return []

# trading/views.py
from rest_framework import status
from rest_framework.decorators import api_view
from rest_framework.response import Response
from django.contrib.auth.models import User
from django.db import transaction
from decimal import Decimal
from .models import Portfolio, Stock, Holding, Transaction
from .serializers import PortfolioSerializer, TransactionSerializer
from .stock_service import StockService

@api_view(['GET'])
def get_stock_quote(request, symbol):
    """Get real-time quote for a specific stock"""
    try:
        quote = StockService.get_stock_quote(symbol)
        if quote:
            return Response(quote)
        else:
            return Response({'error': 'Stock not found'}, status=404)
    except Exception as e:
        return Response({'error': str(e)}, status=500)

@api_view(['GET'])
def get_multiple_quotes(request):
    """Get quotes for multiple stocks"""
    symbols = request.GET.get('symbols', '').split(',')
    symbols = [s.strip().upper() for s in symbols if s.strip()]
    
    if not symbols:
        return Response({'error': 'No symbols provided'}, status=400)
    
    try:
        quotes = StockService.get_multiple_quotes(symbols)
        return Response({
            'success': True,
            'quotes': quotes
        })
    except Exception as e:
        return Response({'error': str(e)}, status=500)

@api_view(['GET'])
def search_stocks(request):
    """Search for stocks"""
    query = request.GET.get('q', '').strip()
    if not query:
        return Response({'error': 'Query parameter required'}, status=400)
    
    try:
        results = StockService.search_stocks(query)
        return Response({'results': results})
    except Exception as e:
        return Response({'error': str(e)}, status=500)

@api_view(['GET'])
def get_portfolio(request):
    """Get user's portfolio (using session or default user)"""
    try:
        # For demo purposes, use user ID 1 or create a default user
        user, created = User.objects.get_or_create(
            username='demo_user',
            defaults={'email': 'demo@example.com'}
        )
        
        portfolio, created = Portfolio.objects.get_or_create(user=user)
        serializer = PortfolioSerializer(portfolio)
        return Response(serializer.data)
    except Exception as e:
        return Response({'error': str(e)}, status=500)

@api_view(['POST'])
def execute_trade(request):
    """Execute a buy or sell trade"""
    try:
        # Get or create demo user
        user, created = User.objects.get_or_create(
            username='demo_user',
            defaults={'email': 'demo@example.com'}
        )
        portfolio, created = Portfolio.objects.get_or_create(user=user)
        
        # Extract trade data
        symbol = request.data.get('symbol', '').upper()
        trade_type = request.data.get('type', '').upper()  # BUY or SELL
        quantity = int(request.data.get('quantity', 0))
        order_type = request.data.get('orderType', 'market')
        limit_price = request.data.get('limitPrice')
        
        if not all([symbol, trade_type, quantity > 0]):
            return Response({'error': 'Missing required fields'}, status=400)
        
        if trade_type not in ['BUY', 'SELL']:
            return Response({'error': 'Invalid trade type'}, status=400)
        
        # Get current stock price
        quote = StockService.get_stock_quote(symbol)
        if not quote:
            return Response({'error': 'Unable to get stock price'}, status=400)
        
        current_price = Decimal(str(quote['price']))
        
        # Handle limit orders
        if order_type == 'limit' and limit_price:
            limit_price = Decimal(str(limit_price))
            if trade_type == 'BUY' and current_price > limit_price:
                return Response({'error': 'Limit price not met for buy order'}, status=400)
            elif trade_type == 'SELL' and current_price < limit_price:
                return Response({'error': 'Limit price not met for sell order'}, status=400)
        
        # Get or create stock record
        stock, created = Stock.objects.get_or_create(
            symbol=symbol,
            defaults={
                'name': quote.get('name', symbol),
                'exchange': quote.get('exchange', '')
            }
        )
        
        with transaction.atomic():
            if trade_type == 'BUY':
                total_cost = current_price * quantity
                
                if portfolio.cash < total_cost:
                    return Response({'error': 'Insufficient funds'}, status=400)
                
                # Update cash
                portfolio.cash -= total_cost
                portfolio.save()
                
                # Update holdings
                holding, created = Holding.objects.get_or_create(
                    portfolio=portfolio,
                    stock=stock,
                    defaults={'quantity': 0, 'average_price': Decimal('0.00')}
                )
                
                # Calculate new average price
                total_shares = holding.quantity + quantity
                total_value = (holding.average_price * holding.quantity) + total_cost
                new_avg_price = total_value / total_shares if total_shares > 0 else current_price
                
                holding.quantity = total_shares
                holding.average_price = new_avg_price
                holding.save()
                
            else:  # SELL
                try:
                    holding = Holding.objects.get(portfolio=portfolio, stock=stock)
                    if holding.quantity < quantity:
                        return Response({'error': 'Insufficient shares to sell'}, status=400)
                except Holding.DoesNotExist:
                    return Response({'error': 'No shares to sell'}, status=400)
                
                total_revenue = current_price * quantity
                
                # Update cash
                portfolio.cash += total_revenue
                portfolio.save()
                
                # Update holdings
                holding.quantity -= quantity
                if holding.quantity == 0:
                    holding.delete()
                else:
                    holding.save()
            
            # Create transaction record
            Transaction.objects.create(
                portfolio=portfolio,
                stock=stock,
                transaction_type=trade_type,
                quantity=quantity,
                price=current_price,
                total_amount=current_price * quantity
            )
        
        return Response({
            'success': True,
            'message': f'{trade_type} order executed successfully',
            'transaction': {
                'symbol': symbol,
                'type': trade_type,
                'quantity': quantity,
                'price': float(current_price),
                'total': float(current_price * quantity)
            }
        })
        
    except Exception as e:
        return Response({'error': str(e)}, status=500)

@api_view(['GET'])
def get_transactions(request):
    """Get recent transactions"""
    try:
        user, created = User.objects.get_or_create(
            username='demo_user',
            defaults={'email': 'demo@example.com'}
        )
        portfolio, created = Portfolio.objects.get_or_create(user=user)
        
        transactions = Transaction.objects.filter(portfolio=portfolio)[:20]
        serializer = TransactionSerializer(transactions, many=True)
        return Response({'transactions': serializer.data})
    except Exception as e:
        return Response({'error': str(e)}, status=500)

# trading/urls.py
from django.urls import path
from . import views

urlpatterns = [
    # Stock data endpoints
    path('stocks/<str:symbol>/', views.get_stock_quote, name='stock_quote'),
    path('stocks/quotes/', views.get_multiple_quotes, name='multiple_quotes'),
    path('stocks/search/', views.search_stocks, name='search_stocks'),
    
    # Portfolio endpoints
    path('portfolio/', views.get_portfolio, name='portfolio'),
    path('trade/', views.execute_trade, name='execute_trade'),
    path('transactions/', views.get_transactions, name='transactions'),
]

# trading/admin.py
from django.contrib import admin
from .models import Portfolio, Stock, Holding, Transaction

@admin.register(Stock)
class StockAdmin(admin.ModelAdmin):
    list_display = ['symbol', 'name', 'exchange', 'created_at']
    search_fields = ['symbol', 'name']
    list_filter = ['exchange']

@admin.register(Portfolio)
class PortfolioAdmin(admin.ModelAdmin):
    list_display = ['user', 'cash', 'created_at', 'updated_at']
    readonly_fields = ['created_at', 'updated_at']

@admin.register(Holding)
class HoldingAdmin(admin.ModelAdmin):
    list_display = ['portfolio', 'stock', 'quantity', 'average_price', 'updated_at']
    list_filter = ['stock', 'updated_at']

@admin.register(Transaction)
class TransactionAdmin(admin.ModelAdmin):
    list_display = ['portfolio', 'stock', 'transaction_type', 'quantity', 'price', 'timestamp']
    list_filter = ['transaction_type', 'timestamp', 'stock']
    readonly_fields = ['timestamp']

# trading/apps.py
from django.apps import AppConfig

class TradingConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'trading'

# Management command to create initial data
# trading/management/__init__.py
# trading/management/commands/__init__.py

# trading/management/commands/setup_demo.py
from django.core.management.base import BaseCommand
from django.contrib.auth.models import User
from trading.models import Portfolio

class Command(BaseCommand):
    help = 'Setup demo user and portfolio'

    def handle(self, *args, **options):
        user, created = User.objects.get_or_create(
            username='demo_user',
            defaults={'email': 'demo@example.com'}
        )
        
        portfolio, created = Portfolio.objects.get_or_create(user=user)
        
        if created:
            self.stdout.write(
                self.style.SUCCESS(f'Created demo portfolio with ${portfolio.cash}')
            )
        else:
            self.stdout.write(
                self.style.SUCCESS(f'Demo portfolio exists with ${portfolio.cash}')
            )